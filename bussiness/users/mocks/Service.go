// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "daily-tracker-calories/bussiness/users"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: id
func (_m *Service) FindByID(id int) (*users.Domain, error) {
	ret := _m.Called(id)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(int) *users.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Service) Login(email string, password string) (*users.Domain, error) {
	ret := _m.Called(email, password)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(string, string) *users.Domain); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: user
func (_m *Service) RegisterUser(user *users.Domain) (*users.Domain, error) {
	ret := _m.Called(user)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(*users.Domain) *users.Domain); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.Domain) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, user
func (_m *Service) Update(id int, user *users.Domain) (*users.Domain, error) {
	ret := _m.Called(id, user)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(int, *users.Domain) *users.Domain); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *users.Domain) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
