// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	histories "daily-tracker-calories/bussiness/histories"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllHistoriesByUserID provides a mock function with given fields: userid
func (_m *Repository) GetAllHistoriesByUserID(userid int) (*[]histories.Domain, error) {
	ret := _m.Called(userid)

	var r0 *[]histories.Domain
	if rf, ok := ret.Get(0).(func(int) *[]histories.Domain); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryByUserID provides a mock function with given fields: userid
func (_m *Repository) GetHistoryByUserID(userid int) (*histories.Domain, error) {
	ret := _m.Called(userid)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *Repository) Insert(_a0 *histories.Domain) (*histories.Domain, error) {
	ret := _m.Called(_a0)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(*histories.Domain) *histories.Domain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*histories.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SumCalorieByUserID provides a mock function with given fields: userid
func (_m *Repository) SumCalorieByUserID(userid int) (float64, error) {
	ret := _m.Called(userid)

	var r0 float64
	if rf, ok := ret.Get(0).(func(int) float64); ok {
		r0 = rf(userid)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
