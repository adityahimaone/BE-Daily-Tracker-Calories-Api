// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	calories "daily-tracker-calories/bussiness/calories"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CountCalorie provides a mock function with given fields: calorie
func (_m *Service) CountCalorie(calorie *calories.Domain) (*calories.Domain, error) {
	ret := _m.Called(calorie)

	var r0 *calories.Domain
	if rf, ok := ret.Get(0).(func(*calories.Domain) *calories.Domain); ok {
		r0 = rf(calorie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*calories.Domain) error); ok {
		r1 = rf(calorie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCalorie provides a mock function with given fields: calorie, id
func (_m *Service) CreateCalorie(calorie *calories.Domain, id int) (*calories.Domain, error) {
	ret := _m.Called(calorie, id)

	var r0 *calories.Domain
	if rf, ok := ret.Get(0).(func(*calories.Domain, int) *calories.Domain); ok {
		r0 = rf(calorie, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*calories.Domain, int) error); ok {
		r1 = rf(calorie, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalorieByUserID provides a mock function with given fields: id
func (_m *Service) GetCalorieByUserID(id int) (*calories.Domain, error) {
	ret := _m.Called(id)

	var r0 *calories.Domain
	if rf, ok := ret.Get(0).(func(int) *calories.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalorieFloat provides a mock function with given fields: id
func (_m *Service) GetCalorieFloat(id int) (float64, error) {
	ret := _m.Called(id)

	var r0 float64
	if rf, ok := ret.Get(0).(func(int) float64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
