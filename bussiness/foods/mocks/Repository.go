// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	foods "daily-tracker-calories/bussiness/foods"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id, food
func (_m *Repository) Delete(id int, food *foods.Domain) (*foods.Domain, error) {
	ret := _m.Called(id, food)

	var r0 *foods.Domain
	if rf, ok := ret.Get(0).(func(int, *foods.Domain) *foods.Domain); ok {
		r0 = rf(id, food)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *foods.Domain) error); ok {
		r1 = rf(id, food)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFood provides a mock function with given fields:
func (_m *Repository) GetAllFood() (*[]foods.Domain, error) {
	ret := _m.Called()

	var r0 *[]foods.Domain
	if rf, ok := ret.Get(0).(func() *[]foods.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodByID provides a mock function with given fields: id
func (_m *Repository) GetFoodByID(id int) (*foods.Domain, error) {
	ret := _m.Called(id)

	var r0 *foods.Domain
	if rf, ok := ret.Get(0).(func(int) *foods.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodByName provides a mock function with given fields: name
func (_m *Repository) GetFoodByName(name string) (*foods.Domain, error) {
	ret := _m.Called(name)

	var r0 *foods.Domain
	if rf, ok := ret.Get(0).(func(string) *foods.Domain); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: food
func (_m *Repository) Insert(food *foods.Domain) (*foods.Domain, error) {
	ret := _m.Called(food)

	var r0 *foods.Domain
	if rf, ok := ret.Get(0).(func(*foods.Domain) *foods.Domain); ok {
		r0 = rf(food)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*foods.Domain) error); ok {
		r1 = rf(food)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, food
func (_m *Repository) Update(id int, food *foods.Domain) (*foods.Domain, error) {
	ret := _m.Called(id, food)

	var r0 *foods.Domain
	if rf, ok := ret.Get(0).(func(int, *foods.Domain) *foods.Domain); ok {
		r0 = rf(id, food)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*foods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *foods.Domain) error); ok {
		r1 = rf(id, food)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
