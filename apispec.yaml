openapi: 3.0.0
info:
  description: |
    Track your calories everyday
  version: "1.0.0"
  title:  Daily Tracker Calories
servers:
  - url: 'https://localhost:8080/'
tags:
  - name: user
    description: user resource
  - name: food
    description: food resource
  - name: histories
    description: histories resource
  - name: calories
    description: calories resource
paths:
  /food:
    post:
      tags:
        - food
      summary: Add a new Food
      operationId: addFood
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        required: true
    get:
      tags:
        - food
      summary: Get all Food
      operationId: getFood
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food_List'
  '/food/{id}':
    get:
      tags:
        - food
      summary: Find Food by ID
      description: Returns a single Food
      operationId: getFoodById
      parameters:
        - name: id
          in: path
          description: ID of food to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '400':
          description: Invalid ID supplied
        '404':
          description: Food not found
    put:
      tags:
        - food
      summary: Update an existing Food
      operationId: updateFood
      parameters:
        - name: id
          in: path
          description: ID of food to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID
        '404':
          description: Food not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        required: true
    delete:
      tags:
        - food
      summary: Delete Food
      description: This can only be done by the logged in user.
      operationId: deleteFood
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete Success
        '400':
          description: Invalid Id
        '404':
          description: Food not found
  '/food/{name}':
    get:
      tags:
        - food
      summary: Find Food by Name
      description: Returns a single Food
      operationId: getFoodByName
      parameters:
        - name: name
          in: path
          description: Name of food to return
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '400':
          description: Invalid Name
        '404':
          description: Food not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{id}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Delete
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Delete
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /histories:
    post:
      tags:
        - histories
      summary: Create Histories
      description: This can only be done by the logged in user.
      operationId: createHistorie
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Historie'
        description: Created user object
        required: true
  /calorie:
    post:
      tags:
        - calories
      summary: Count Calorie
      description: This can only be done by the logged in user.
      operationId: createCalorie
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Calorie'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calorie'
        description: Created user object
        required: true
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        username:
          type: string
          example: cloud99
        password:
          type: string
          example: secret
        email:
          type: string
          example: awan@mail.com
        name:
          type: string
          example: clowdi temberman
        avatar:
          type: string
          example: ava/avatar.png
        gender:
          type: string
          example: male
        calorie_id:
          type: integer
          example: 10
        created_at:
          type: string
          format: timestamp
          example: '124123413'
        updated_at:
          type: string
          format: timestamp
          example: '124123413'
    Food:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        name:
          type: integer
          example: Bakso
        image:
          type: string
          example: /images/food/bakso.jpg
        calorie:
          type: integer
          example: 351
        created_at:
          type: string
          format: timestamp
          example: '124123413'
        updated_at:
          type: string
          format: timestamp
          example: '124123413'
    Food_List:
      type: "array"
      items:
        $ref: "#/components/schemas/Food"
      example:
        - id: 1
          name: Bakso
          image: images/foods/bakso.jpg
          calorie: 254
          created_at: '124123413'
          updated_at: '124123413'
        - id: 2
          name: Sate
          image: images/foods/sate.jpg
          calorie: 254
          created_at: '124123413'
          updated_at: '124123413'
    Login:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzIyMTU5ODUsInVzZXJpZCI6MTF9.N72CvB3ffoZKvntUC4MAtDPpzQTQjIfzvnNSTNBuC7A
    Historie:
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        total_calorie:
          type: integer
          example: 2120
        user_id:
          type: integer
          example: 12
        status:
          type: string
          example: Over
        date:
          type: string
          format: date
          example: '2021-04-12'
        created_at:
          type: string
          format: timestamp
          example: '124123413'
        updated_at:
          type: string
          format: timestamp
          example: '124123413'
    Calorie:
      properties:
        id:
          type: integer
          format: uuid
          example: 10
        weight:
          type: integer
          example: 50
        height:
          type: integer
          example: 165
        age:
          type: integer
          example: 25
        activity:
          type: integer
          example: 2
    Response_Calorie:
      properties:
        count_calorie:
          type: integer
          example: 2210
  requestBodies:
    Food:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Food'
      description: Food object that needs to be added
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header